import streamlit as st
import numpy as np
import pandas as pd
import pathlib


def load_css(file_name: str) -> None:
    with open(file_name) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


css_path = pathlib.Path("css/style.css")
load_css(css_path)


df = pd.read_csv('data/MobilesDataset2025.csv', encoding='ISO-8859-1')

st.title('üìû Classification of Mobile Phones')
st.markdown('''<div class="container">
            <div class="row">
                <div class="col-contentML">
                    <h3>‚Ä¢ ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏áData Set</h3>
                    <p>‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ô‡∏≥Dataset ‡∏°‡∏≤ ‡∏à‡∏≤‡∏Å
                    <a href="https://www.kaggle.com/datasets/abdulmalik1518/mobiles-dataset-2025"> Kaggle </a> 
                    ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Dataset ‡∏Ç‡∏≠‡∏á Moblie‡πÉ‡∏ô ‡∏õ‡∏µ2024 ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß Dataset ‡∏à‡∏∞‡∏°‡∏µ Weight Processor Ram Front/Back camera BatteryCapacity Price‡πÉ‡∏ô‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞ Screen size ‡πÄ‡∏õ‡πá‡∏ô feature ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Mobile ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö: Budget (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î), Mid-range (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á), Premium (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á RAM ‡πÅ‡∏•‡∏∞ Price ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
                    ‡πÇ‡∏î‡∏¢ Algorithm ‡∏ó‡∏µ‡πà‡∏ú‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∑‡∏≠ K-Nearest Neighbors (KNN) ‡πÅ‡∏•‡∏∞ Support Vector Machine (SVM)</p>
                </div>
            </div>
        </div>''', unsafe_allow_html=True)

st.divider()
st.markdown("<h3 style='text-align: center; color: #00000;'>Raw Data</h3>",
            unsafe_allow_html=True)
st.write(df)

st.divider()
st.subheader('Company Name Filter From Raw Data')
st.markdown(
    f"""
    <div style="display: flex; flex-wrap: nowrap; overflow-x: auto;">
        {' '.join([f'<div style="padding: 10px; margin-right: 20px;">{name}</div>' for name in df['Company Name'].unique()])}
    </div>
    """, unsafe_allow_html=True
)

st.divider()
st.subheader('‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á K-Nearest Neighbors (KNN)')
st.write("‚Ä¢ K-Nearest Neighbors (KNN)‡πÄ‡∏õ‡πá‡∏ô ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•(Classification) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î(K) ‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")

st.divider()
st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• K-Nearest Neighbors (KNN)")
st.subheader("- Data Cleansing")
st.write("‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏áDataframe‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ú‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏ácategory‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õtrain‡πÇ‡∏°‡πÄ‡∏î‡∏•")    
st.code('''
df = pd.read_csv('data/MobilesDataset2025.csv', encoding='ISO-8859-1')

df.dropna(subset=['Model Name'], inplace=True)

df_sample = df.sample(n=30, random_state=52)

def extract_max_number(text):
    numbers = re.findall(r'\d+\.?\d*', str(text))
    return max(numbers) if numbers else None


def extract_front_camera(text):
    text = str(text)
    if "4K" in text:
        return "4K"
    numbers = re.findall(r'\d+\.?\d*', text)
    return max(numbers, key=float) + " MP" if numbers else None


def extract_back_camera(text):
    numbers = re.findall(r'\d+', str(text))
    total = sum(map(int, numbers)) if numbers else 0
    return f"{total} MP" if total > 0 else None


def categorize_phone(row):
    ram = row['RAM(GB)']
    price = row['Price(Baht)']
    if ram <= 4 and price <= 10000:
        return 'Budget'
    elif 4 < ram <= 8 and 10000 < price <= 25000:
        return 'Mid-range'
    else:
        return 'Premium'

        
interested = pd.DataFrame({
    'Model Name': df_sample['Model Name'],
    'RAM(GB)': df_sample['RAM'].apply(extract_max_number).fillna(0).astype(float).round().astype(int),
    'Front Camera': df_sample['Front Camera'].apply(extract_front_camera),
    'Back Camera': df_sample['Back Camera'].apply(extract_back_camera),
    'Battery Capacity(mAh)': df_sample['Battery Capacity'].astype(str).str.split("m", expand=True)[0].str.replace(',', '').astype(float) / 1000,
    'Screen Size': df_sample['Screen Size'].apply(extract_max_number),
    'Price(Baht)': df_sample['Launched Price (USA)'],
    'Category': "",
})
        
interested['Price(Baht)'] = interested['Price(Baht)'].astype(str).str.split(" ", expand=True)[1].str.replace(',', '', regex=True).astype(float) * 33.64
interested['Price(Baht)'] = interested['Price(Baht)'].fillna(interested['Price(Baht)'].median())
        
category_mapping = {'Budget': 0, 'Mid-range': 1, 'Premium': 2}
interested['Category'] = interested.apply(categorize_phone, axis=1).map(
    category_mapping).fillna(0).astype(int)
        ''')
st.divider()
st.write("‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏ú‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏áModel KNN ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ K ‡πÄ‡∏õ‡πá‡∏ô 5 ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô X(feature) ‡πÅ‡∏•‡∏∞ Y(Label) ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ train‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ")
st.code(''' 
    knn = KNeighborsClassifier(n_neighbors=5)
    X = interested[[ram_col, price_col]]
    y = interested['Category']
        
    X_predict = interested[[ram_col, price_col]]
    knn.fit(X, y)
    y_pred = knn.predict(X_predict))
        ''')

st.divider()
st.write("‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£Plot‡∏Å‡∏£‡∏≤‡∏üScatter plot‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏áClassifications‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏îscale‡∏™‡∏µ‡∏Ç‡∏≠‡∏ácolorbar‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏µ‡∏Ñ‡∏∑‡∏≠Classifications‡∏≠‡∏∞‡πÑ‡∏£")
st.code(''' 
    x_min, x_max = X[ram_col].min() - 1, X[ram_col].max() + 1
    y_min, y_max = X[price_col].min() - 5000, X[price_col].max() + 5000
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),np.linspace(y_min, y_max, 100))

    Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.figure(figsize=(8, 6))
    plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.viridis)

    scatter = plt.scatter(X[ram_col], X[price_col], c=y,cmap=plt.cm.viridis, edgecolor="k")
    plt.colorbar(scatter, ticks=[0, 1, 2], label="Category (Budget(0) Mid-range(1) Premium(2))")

    y_min, y_max = X[price_col].min(), X[price_col].max()
    plt.yticks(np.arange(y_min, y_max + 5000, y_max//10))
        
    plt.xlabel('RAM (GB)')
    plt.ylabel('Price (Baht)')
    plt.title('Mobile Phone Classification')
    st.pyplot(plt)
''')
st.divider()
st.write("‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ú‡∏°‡∏Å‡πá‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy, Precision, Recall, F1 Score ‡πÅ‡∏•‡∏∞ Confusion Matrix‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.code('''
    accuracy = accuracy_score(y, y_pred)
    precision = precision_score(y, y_pred, average='weighted', zero_division=1)
    recall = recall_score(y, y_pred, average='weighted')
    f1 = f1_score(y, y_pred, average='weighted')
        
    st.write(f"Accuracy: {accuracy*100:.2f}%")
    st.write(f"Precision: {precision*100:.2f}%")
    st.write(f"Recall: {recall*100:.2f}%")
    st.write(f"F1 Score: {f1*100:.2f}%")
        
    cm = confusion_matrix(y, y_pred)
    st.subheader("Confusion Matrix : ")
    st.write(pd.DataFrame(cm, columns=[f'Predicted {i}' for i in range( cm.shape[1])], index=[f'Actual {i}' for i in range(cm.shape[0])]))
    ''')

st.divider()
st.subheader('‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Support Vector Machine (SVM)')
st.write("‚Ä¢ Support Vector Machine (SVM) ‡πÄ‡∏õ‡πá‡∏ô ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•(Classification) ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")

st.divider()
st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Support Vector Machine (SVM)")
st.subheader("- Data Cleansing")
st.write("‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö KNN ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏áDataframe‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ú‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏ácategory‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õtrain‡πÇ‡∏°‡πÄ‡∏î‡∏•")    
st.code('''
df = pd.read_csv('data/MobilesDataset2025.csv', encoding='ISO-8859-1')

df.dropna(subset=['Model Name'], inplace=True)

df_sample = df.sample(n=30, random_state=52)

def extract_max_number(text):
    numbers = re.findall(r'\d+\.?\d*', str(text))
    return max(numbers) if numbers else None


def extract_front_camera(text):
    text = str(text)
    if "4K" in text:
        return "4K"
    numbers = re.findall(r'\d+\.?\d*', text)
    return max(numbers, key=float) + " MP" if numbers else None


def extract_back_camera(text):
    numbers = re.findall(r'\d+', str(text))
    total = sum(map(int, numbers)) if numbers else 0
    return f"{total} MP" if total > 0 else None


def categorize_phone(row):
    ram = row['RAM(GB)']
    price = row['Price(Baht)']
    if ram <= 4 and price <= 10000:
        return 'Budget'
    elif 4 < ram <= 8 and 10000 < price <= 25000:
        return 'Mid-range'
    else:
        return 'Premium'

        
interested = pd.DataFrame({
    'Model Name': df_sample['Model Name'],
    'RAM(GB)': df_sample['RAM'].apply(extract_max_number).fillna(0).astype(float).round().astype(int),
    'Front Camera': df_sample['Front Camera'].apply(extract_front_camera),
    'Back Camera': df_sample['Back Camera'].apply(extract_back_camera),
    'Battery Capacity(mAh)': df_sample['Battery Capacity'].astype(str).str.split("m", expand=True)[0].str.replace(',', '').astype(float) / 1000,
    'Screen Size': df_sample['Screen Size'].apply(extract_max_number),
    'Price(Baht)': df_sample['Launched Price (USA)'],
    'Category': "",
})
        
interested['Price(Baht)'] = interested['Price(Baht)'].astype(str).str.split(" ", expand=True)[1].str.replace(',', '', regex=True).astype(float) * 33.64
interested['Price(Baht)'] = interested['Price(Baht)'].fillna(interested['Price(Baht)'].median())
        
category_mapping = {'Budget': 0, 'Mid-range': 1, 'Premium': 2}
interested['Category'] = interested.apply(categorize_phone, axis=1).map(
    category_mapping).fillna(0).astype(int)
        ''')
st.divider()
st.write("‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏ú‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏áModel SVM ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâkernel‡πÄ‡∏õ‡πá‡∏ôlinear‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô X(feature) ‡πÅ‡∏•‡∏∞ Y(Label) ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á X ‡πÅ‡∏•‡∏∞ Y ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏∏‡∏îTrain ‡πÅ‡∏•‡∏∞ ‡∏ä‡∏∏‡∏îTest ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õtrain‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.code(''' 
   svm = SVC(kernel='linear', C=0.3)
    X = interested[[ram_col, price_col]]
    y = interested['Category']
        
    x_train, x_test, y_train, y_test = model_selection.train_test_split(
        X, y, test_size=0.80, random_state=101)
    svm.fit(x_train, y_train)
    y_pred = svm.predict(x_test)
        ''')
st.divider()
st.write("‡πÅ‡∏•‡∏∞‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£Plot‡∏Å‡∏£‡∏≤‡∏üScatter plot‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏áClassifications‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏îscale‡∏™‡∏µ‡∏Ç‡∏≠‡∏ácolorbar‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏µ‡∏Ñ‡∏∑‡∏≠Classifications‡∏≠‡∏∞‡πÑ‡∏£")
st.code('''
    x_min, x_max = X[ram_col].min() - 1, X[ram_col].max() + 1
    y_min, y_max = X[price_col].min() - 5000, X[price_col].max() + 5000
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),np.linspace(y_min, y_max, 100))

    Z = svm.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.figure(figsize=(8, 6))
    plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.viridis)

    plot = plt.subplot()
    scatter = plt.scatter(X[ram_col], X[price_col], c=y,cmap=plt.cm.viridis, edgecolor="k")
    plt.colorbar(scatter, ticks=[0, 1, 2],label="Category (Budget(0) Mid-range(1) Premium(2))")

    plt.xlabel('RAM (GB)')
    plt.ylabel('Price (Baht)')
    plt.title('Mobile Phone Classification')
    st.pyplot(plt)
        ''')

st.divider()
st.write("‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ Accuracy, Precision, Recall, F1 Score ‡πÅ‡∏•‡∏∞ Confusion Matrix‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.code('''
accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(
        y_test, y_pred, average='weighted', zero_division=1)
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')

    st.write(f"Accuracy: {accuracy*100:.2f}%")
    st.write(f"Precision: {precision*100:.2f}%")
    st.write(f"Recall: {recall*100:.2f}%")
    st.write(f"F1 Score: {f1*100:.2f}%")
        
    cm = confusion_matrix(y_test, y_pred)
    st.subheader("Confusion Matrix : ")
    st.write(pd.DataFrame(cm, columns=[f'Predicted {i}' for i in range(cm.shape[1])], index=[f'Actual {i}' for i in range(cm.shape[0])]))
''')
st.divider()
st.subheader("‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
st.page_link("./pages/machine_learning_model",label="Machine Learning Model",icon="üß†")

st.subheader("-‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πàGithub-")
st.link_button("üîó Source Code", "https://github.com/Soulz157/Intelligence_Project")