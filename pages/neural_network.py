import streamlit as st
import numpy as np
import pathlib
import pandas as pd
import matplotlib.pyplot as plt


def load_css(file_name: str) -> None:
    with open(file_name) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


css_path = pathlib.Path("css/style.css")
load_css(css_path)

df = pd.read_csv('data/train.csv')


st.title('üéµ Music Genre Classification')
st.markdown('''<div class="container">
            <div class="row">
                <div class="col-contentNTML">
                    <h3>‚Ä¢ ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏áData Set</h3>
                    <p>Dataset‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏ô‡∏≥ ‡∏°‡∏≤‡∏à‡∏≤‡∏Å
                    <a href="https://www.kaggle.com/datasets/thedevastator/spotify-tracks-genre-dataset"> Kaggle </a> 
                    ‡πÇ‡∏î‡∏¢‡∏ú‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ô‡∏ß‡πÑ‡∏´‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÑ‡∏´‡∏ô‡∏ú‡∏°‡πÄ‡∏•‡∏¢‡πÑ‡∏î‡πâ‡∏ô‡∏≥Dataset‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£Predict‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ô‡∏ß‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Neural Network ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâModel Feedforward Neural Networks (FNN)</p>
                </div>
            </div>
        </div>''', unsafe_allow_html=True)

st.subheader("Feature of Data")
st.markdown('''<div class="container"
                    <div class="row">
         <ul>
            <li><b>artists:</b> ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏á</li>
            <li><b>album_name:</b> ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà</li>
            <li><b>track_name:</b> ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á</li>
            <li><b>popularity:</b> ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ö‡∏ô Spotify (0-100)</li>
            <li><b>duration_ms:</b> ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)</li>
            <li><b>explicit:</b> ‡πÄ‡∏û‡∏•‡∏á‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà</li>
            <li><b>danceability:</b> ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô (0-1)</li>
            <li><b>energy:</b> ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (0-1)</li>
            <li><b>key:</b> ‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)</li>
            <li><b>loudness:</b> ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (‡πÄ‡∏î‡∏ã‡∏¥‡πÄ‡∏ö‡∏•)</li>
            <li><b>mode:</b> ‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (0 = ‡πÑ‡∏°‡πÄ‡∏ô‡∏≠‡∏£‡πå, 1 = ‡πÄ‡∏°‡πÄ‡∏à‡∏≠‡∏£‡πå)</li>
            <li><b>speechiness:</b> ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏á (0-1)</li>
            <li><b>acousticness:</b> ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡∏Ñ‡∏π‡∏™‡∏ï‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (0-1)</li>
            <li><b>instrumentalness:</b> ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á (0-1)</li>
            <li><b>liveness:</b> ‡∏Å‡∏≤‡∏£‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ü‡∏±‡∏á‡∏™‡∏î‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏•‡∏á (0-1)</li>
            <li><b>valence:</b> ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (0-1)</li>
            <li><b>tempo:</b> ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (BPM)</li>
            <li><b>time_signature:</b> ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á</li>
            <li><b>track_genre:</b> ‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á</li>
        </ul>
                    </div>
            </div>''', unsafe_allow_html=True)

st.divider()
st.markdown("<h3 style='text-align: center; color: #00000;'>Raw Data</h3>",
            unsafe_allow_html=True)
st.write(df)
st.divider()

st.subheader("‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Feedforward Neural Networks (FNN)")
st.write("‚Ä¢ Feedforward Neural Networks (FNN) ‡∏Ñ‡∏∑‡∏≠ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÄ‡∏ó‡∏µ‡∏¢‡∏°(Neural Networks) ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Layer ‡∏Ç‡∏≠‡∏á Node‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏ô‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏±‡πà‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ôoutput ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
st.write("- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á FNN ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ 3 ‡∏ä‡∏±‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏Ñ‡∏∑‡∏≠ Input Layer, Hidden Layer ‡πÅ‡∏•‡∏∞ Output Layer")
st.divider()

st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡πç‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Feedforward Neural Networks (FNN)")
st.subheader("- Data Cleansing")
st.write("‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤mean‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ö‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£feat ‡∏Å‡∏±‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡∏≥Data‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡∏Ñ‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏ó‡∏≥‡∏ö‡πà‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏ÅDataset‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏°‡∏≤")
st.code('''
f = pd.read_csv('data/train.csv')
df = df.dropna()

artist_split = df.assign(
    artists=df['artists'].str.split(';')).explode('artists')

artist_split = artist_split.assign(track_genre=df['track_genre'])

artist_features = artist_split.groupby('artists').agg({
    'popularity': 'mean',
    'duration_ms': 'mean',
    'danceability': 'mean',
    'energy': 'mean',
    'loudness': 'mean',
    'speechiness': 'mean',
    'acousticness': 'mean',
    'instrumentalness': 'mean',
    'liveness': 'mean',
    'valence': 'mean',
    'tempo' : 'mean',
    'key': lambda x: x.mode()[0] if not x.mode().empty else -1, 
    'mode': lambda x: x.mode()[0] if not x.mode().empty else -1, 
    'track_name': 'count',
    'track_genre': lambda x: x.mode()[0]
}).rename(columns={'track_name': 'track_count'})

artist_features['energy_danceability_ratio'] = artist_features['energy'] / (artist_features['danceability'] + 0.01)
artist_features['speech_instrumental_ratio'] = artist_features['speechiness'] / (artist_features['instrumentalness'] + 0.01)
artist_features['acousticness_energy_ratio'] = artist_features['acousticness'] / (artist_features['energy'] + 0.01)
''')

st.divider()
st.write("‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏ú‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Feedforward Neural Networks (FNN) ‡πÇ‡∏î‡∏¢‡∏°‡∏µHidden Layers 3 ‡∏ä‡∏±‡πâ‡∏ô")
st.code('''
def build_model(input_shape, num_genres):
    model = keras.Sequential([
        keras.layers.Input(shape=(input_shape,)),
        keras.layers.Dense(256, activation='relu'),
        keras.layers.LeakyReLU(negative_slope=0.1),
        keras.layers.BatchNormalization(),
        keras.layers.Dropout(0.3),

        keras.layers.Dense(128, activation='relu'),
        keras.layers.LeakyReLU(negative_slope=0.1),
        keras.layers.BatchNormalization(),
        keras.layers.Dropout(0.3),

        keras.layers.Dense(64, activation='relu'),
        keras.layers.LeakyReLU(negative_slope=0.1),
        keras.layers.BatchNormalization(),
        keras.layers.Dropout(0.3),

        keras.layers.Dense(num_genres, activation='softmax')
    ])
    model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001, amsgrad=True),
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    return model
''')

st.divider()
st.write("‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏áLayer‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏°‡∏Å‡πá‡∏ó‡∏≥‡∏Å‡∏≤‡∏£Train model ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâepochs=200‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ó‡∏£‡∏ô200‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î early_stopping ‡πÅ‡∏•‡∏∞ r_schedule ‡πÅ‡∏•‡∏∞ checkpoint ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏îoverfitting‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ömodel‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ")
st.code('''
MODEL_PATH = "model/genre_classification_model.keras"

if os.path.exists(MODEL_PATH):
    model = keras.models.load_model(MODEL_PATH)
    trainmodel = None
else:
    model = build_model(input_shape, num_genres)

    early_stopping = keras.callbacks.EarlyStopping(
        monitor='val_accuracy',
        patience=20,
        restore_best_weights=True
    )

    r_schedule = keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy', factor=0.5, patience=10, min_lr=1e-6,
        verbose=1)

    checkpoint = keras.callbacks.ModelCheckpoint(
        MODEL_PATH,
        monitor='val_accuracy',
        save_best_only=True,
        verbose=1
    )


    trainmodel = model.fit(X_train, y_train, epochs=200, batch_size=64, validation_split=0.2, callbacks=[early_stopping, r_schedule,checkpoint],class_weight = class_weights)

    if trainmodel is not None:
        history_df = pd.DataFrame(trainmodel.history)
        history_df["epoch"] = history_df.index + 1
        history_df.to_csv("model/training_history.csv", index=False)

    model.save(MODEL_PATH)
''')

st.divider()
st.write("‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Åtrain‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏°‡∏Å‡πá‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£load model‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õplot graph‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤model‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà")
st.code('''
    model = keras.models.load_model("model/genre_classification_model.keras", compile=False)

    model.compile(
        optimizer='adam',
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    
        plt.figure(figsize=(12, 4))

if trainmodel is not None:
    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    
    ax[0].plot(trainmodel.history['accuracy'], label='Training Accuracy')
    ax[0].plot(trainmodel.history['val_accuracy'], label='Validation Accuracy')
    ax[0].set_title('Accuracy')
    ax[0].set_xlabel('Epoch')
    ax[0].set_ylabel('Accuracy')
    ax[0].legend()
    
    ax[1].plot(trainmodel.history['loss'], label='Training Loss')
    ax[1].plot(trainmodel.history['val_loss'], label='Validation Loss')
    ax[1].set_title('Loss')
    ax[1].set_xlabel('Epoch')
    ax[1].set_ylabel('Loss')
    ax[1].legend()
    
    st.pyplot(fig)
    

elif os.path.exists("model/training_history.csv"):
    history_df = pd.read_csv("model/training_history.csv")
    
    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    
    ax[0].plot(history_df['accuracy'], label='Training Accuracy')
    ax[0].plot(history_df['val_accuracy'], label='Validation Accuracy')
    ax[0].set_title('Accuracy')
    ax[0].set_xlabel('Epoch')
    ax[0].set_ylabel('Accuracy')
    ax[0].legend()
    
    ax[1].plot(history_df['loss'], label='Training Loss')
    ax[1].plot(history_df['val_loss'], label='Validation Loss')
    ax[1].set_title('Loss')
    ax[1].set_xlabel('Epoch')
    ax[1].set_ylabel('Loss')
    ax[1].legend()
    
    st.pyplot(fig)
    
        ''')

st.divider()
st.write("‡πÅ‡∏•‡∏∞‡∏ú‡∏°‡∏Å‡πá‡∏à‡∏∞‡πÉ‡∏´‡πâ user ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏•‡∏á‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâModel‡∏ó‡∏≥‡∏Å‡∏≤‡∏£Predict‡∏ß‡πà‡∏≤‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ô‡∏ß‡πÑ‡∏´‡∏ô")
st.code('''
        ef predict_artist_genre(artist_name, df, model, scaler, encoder):

    if artist_name not in df.index:
        return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô {artist_name}"
    
    try:
        artist_data = df.loc[artist_name]
        
        all_features = []
        for feature in X.columns:
            if feature in artist_data:
                all_features.append(artist_data[feature])
            else:
                all_features.append(0)
                
        features_array = np.array(all_features).reshape(1, -1)
        
        prediction = model.predict(features_array)
        predicted_genre_idx = np.argmax(prediction)
        predicted_genre = label_encoder.classes_[predicted_genre_idx]
        
        confidence = prediction[0][predicted_genre_idx] * 100
        
        top_indices = np.argsort(prediction[0])[-3:][::-1]
        top_genres = [(label_encoder.classes_[idx], prediction[0][idx] * 100) for idx in top_indices]
        
        feature_importances = {}
        for i, feature in enumerate(numerical_features):
            if feature in artist_data and i < len(features_array[0]):
                feature_importances[feature] = features_array[0][i]
        
        strongest_features = sorted(feature_importances.items(),key=lambda x: abs(x[1]),reverse=True)[:5]
        
        return {
            'artist': artist_name,
            'predicted_genre': predicted_genre,
            'confidence': f"{confidence:.2f}%",
            'top_genres': top_genres,
            'notable_characteristics': strongest_features
        }
    except Exception as e:
        return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô: {str(e)}"

st.subheader("üîç Predict Artist's Genre")
artist_name = st.text_input(
    "Enter artist name", placeholder="Enter artist name")
if artist_name:
    result = predict_artist_genre(
        artist_name, artist_features, model, scaler, label_encoder)

    if isinstance(result, dict):
        with st.expander("Prediction Results", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**Artist:** {result['artist']}")
                st.markdown(f"**Predicted Genre:** {result['predicted_genre']}")
                st.markdown(f"**Confidence:** {result['confidence']}")
                
            with col2:
                st.markdown("**Top 3 Genre Predictions:**")
                for genre, conf in result['top_genres']:
                    st.markdown(f"- {genre}: {conf:.2f}%")
    else:
        st.write(result)
''')

st.link_button("ü™¥ Neural Network Model", "https://intelligence-project-phoorich.streamlit.app/neural_network_model")
st.link_button("üîó Source Code", "https://github.com/Soulz157/Intelligence_Project")